clear

%% Setup Julia server

man = ServerManager('debug', true, ...
                    'gc', true);

% Set up keyword arguments to be sent to julia solver. See run_battery for details
kwargs = struct('extra_timing', false, ...
                'general_ad'  , true);

%% Pick source JSON files for generating model

%JSON file cases
casenames = {'p2d_40'};
casenames = casenames{1};

% casenames = {'3d_demo_case'};
% casenames = {'4680_case'};

% JSON file folder

battmo_folder = battmoDir();
jsonfolder    = fullfile(battmo_folder, 'Examples', 'JsonDataFiles');

%% Setup model from Matlab

testCase = 'Matlab';

switch testCase

  case 'Matlab'

    % If true a reference solution will be generated.
    generate_reference_solution = true;
    export = setupMatlabModel(casenames, jsonfolder, generate_reference_solution);

    man.load('data'         , export  , ...
             'kwargs'       , kwargs  , ...
             'inputType'    , 'Matlab', ...
             'use_state_ref', generate_reference_solution);

  case 'JSON'

    generate_reference_solution = false;
    inputFileName = fullfile(jsonfolder, 'p2d_40_jl.json');

    % man.load('kwargs'       , kwargs, ...
             % 'inputType'    , 'JSON', ...
             % 'inputFileName', inputFileName);

    man.load('inputType'    , 'JSON', ...
             'inputFileName', inputFileName);

  otherwise

    error('testCase not recognized');

end

result = man.run();

%% Plot results

figure()
% Results generated by BattMo.jl
voltage = cellfun(@(x) x.Phi, {result.states.BPP});
time = cumsum(result.extra.timesteps);
plot(time/hour, voltage, "DisplayName", "BattMo Julia", LineWidth = 2)
xlabel('Time / h')
ylabel('Voltage / h')

if generate_reference_solution
    hold on
    E = cellfun(@(state) state.Control.E, export.states);
    time = cellfun(@(state) state.time, export.states);
    plot(time/hour, E, "DisplayName", "BattMo Matlab", LineWidth = 2, LineStyle = " -- ")
end

legend
grid on



%{
Copyright 2021-2024 SINTEF Industry, Sustainable Energy Technology
and SINTEF Digital, Mathematics & Cybernetics.

This file is part of The Battery Modeling Toolbox BattMo

BattMo is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

BattMo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with BattMo.  If not, see <http://www.gnu.org/licenses/>.
%}
