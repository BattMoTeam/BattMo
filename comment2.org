#+OPTIONS: num:nil
#+OPTIONS: toc:nil

* Inconsistencies easily occur
  - ~Electrode~ is childe of ~ElectrochemicalComponent~ but does not have ~phi~ variable
* Case where model input matters
  - when we update the accumulation term
  - In the graph function can have the same name but since they are used with different model they may give different
    results (for example reaction rate for GraphiteElectrode and Nmc111electrode)
* Example of alias
  - cLi in graphiteelectroe see [[file:Electrochemistry/Electrodes/GraphiteElectrode_.m::model = model.setAlias('cLi', VarName({'am'}, 'cLi'));][here]]
* Consistency check for the graphs are not implemented.
  - duplicate variable names
  - duplicate aliases (can be conflicting)
  - alias name is same as already declared variable name
* Property setup not completely robust
  - If properties have same name, we keep the last one added (last in the list).
* to get automatic graph based assembly
  needs to introduce multiple output (we often write functions that return multiple outputs)
* removed theta from active material state variable
* missing concentration from elyte in active material
* Example of double side coupling between collector and main electrode component
* move D from ActiveMaterial
* different kind of structures  
  - for example chemistry and electronic could be set at same level
  - now, we have ~ElectroChemicalComponent~ as a child of ~ElectronicComponent~
  - (Relies on last-in priority : maybe not robust)
* use now negative electrode convention for reaction rate
* couplingTerms class could be simplified
  - not sure if we need both componentnames and name
* change name in BatteryInputParams1D
  nenx -> eacnx
* ComponentInputParams
  - may not need to have properties globG and cellind
* dummy update function of T
* in ActiveMaterialInputParams
  - change property Li to default name
* move function setupElectrodeInputParams1D in setupBatteryInputParams1D
* In graph setup
  - handle case where inputnames is empty
  - used for example to setup jBcSource to zero for electrolyte
* Hack for state0 in graph approach
* AD-backend for submodels
* generic name for charge carrier
* Li is still there hanging in some functions
  - and it is assumed all over that cs{1} is charge carrier.
* Do we have a ionic composition in Electrodes as in Electrolyte
* Set up external coupling
  Example where an external function is handy
* Various directory in utilities
  - likely to grow...
* is updateChargeCarrierFlux generic in Electrolyte?
* not same kappa for j and jchem in org6
  - check that
* check initialization
  - what is the right way to do it for potential?
* use setProp
  - in Battery Accumterm for energy
* fix specificHeat
  - account for density/porevolume
* Bruggeman factor
  - add as input parameter
  - function
* Check effective volume / heat capacity
* Check the ohmic resistance computation
  - consistency with j
* Check energy equation assembly
* porosity and volumefraction
  - should we store both values? (volumeFraction only seems better. Imagine three materials)
* effective diffusion coefficient
  - shall we weight with volume fraction? also with coef 1.5 as Bruggeman? it is presented in [[pdfview:/home/xavier/Projects/2021-robin/documents/VidtsWhite.pdf::5][Vidts]]
  - in electrolyte [[file:Materials/Liquid/CarbonateBased/orgLiPF6.m::D = 1e-4 .* 10 .^ ( ( cnst(1,1) + cnst(1,2) ./ ( T - Tgi(1) - Tgi(2) .* c .* 1e-3) + cnst(2,1) .* ...][orgLiPF6]] (non-linear effects?)
  - in [[file:Electrochemistry/ElectrodeActiveComponent.m::state.D = D .* model.volumeFraction .^1.5;][ElectrodeActiveComponent]] set as property of active material. it is rather a property of the component (later
    active material will be set as interface). maybe the same holds for conductivity
* electrical conductivity
  - should not be property of active material as can be seen [[file:Electrochemistry/ElectrodeActiveComponent.m::econd = model.ActiveMaterial.electricalConductivity;][here]] but of ElectrodeActiveComponent
* heat capacity
  - in [J][K]^-1[m]^-3
* check ad backend stuff
* code duplicate problems
  - ThermalComponent, ThermalElectronicComponent, ... : Object hierarchy implies duplicates.
  - We fix this later.
* heat exchanges
  - see [[file:heatexchange.xcf][illustration]]
* effective electrical conductivity for electrolyte
  - in master commit e5407d4880dfb7faece26da3f94630483a6e426b it looks like it is not assembled for the electrolyte
