#+TITLE: Documentation generation for BattMo
* Requirements
** Installation
   Run from the Documentation directory where the ~requirements.txt~ file is
   #+begin_src 
     pip install -r requirements.txt
   #+end_src
** Overview of the package used in sphinx
*** sphinx
    installation instruction described [[https://www.sphinx-doc.org/en/master/usage/installation.html][here]]
    #+begin_src
      pip install sphinx
    #+end_src
*** install sphinx rtd theme
    https://pypi.org/project/sphinx-rtd-theme/
    #+begin_src
      pip install sphinx-rtd-theme
    #+end_src
*** bibtex extension
    https://sphinxcontrib-bibtex.readthedocs.io/en/latest/quickstart.html#installation
    #+begin_src
      pip install sphinxcontrib-bibtex
    #+end_src
*** globabsubs extension
    #+begin_src
      pip install sphinxcontrib-globalsubs
    #+end_src
*** youtube
    #+begin_src shell
      pip install sphinxcontrib-youtube
    #+end_src
*** collapse
    #+begin_src shell
      python -m pip install sphinx_collapse
    #+end_src   
*** autosectionlabel
    - part of default distribution
    - We use ~autosectionlabel_prefix_document = True~ which means that the internal link must be prefixed by the file
      name and a semi-column, see [[https://www.sphinx-doc.org/en/master/usage/extensions/autosectionlabel.html][here]].
   
* Workflow for editing

  In the ~Documentation~ directory, run from terminal
  #+BEGIN_SRC sh
  make html
  #+END_SRC

  The command generates all the files for a static website and writes them in ~Documentation/_build/html~

  When the changes are pushed, the documentation is also automatically compiled on github using github actions


  The deployment of the webpage can be followed from the [[https://github.com/BattMoTeam/BattMo/actions][github page section]]

  The result can be view at

  https://battmoteam.github.io/BattMo/

* Workflow for notebooks written in mlx format
  
** Compilation
   We use the ~export~ function from matlab to export the notebook to ~ipynb~ format. An help exporter class is provided
   [[https://github.com/BattMoTeam/BattMo/blob/main/Documentation/utils/MLXnotebookExporter.m][here]]. The following [[https://github.com/BattMoTeam/BattMo/blob/main/Documentation/utils/exportMLXnotebooks.m][script]] gives example on how it can be used. I have noticed problems with older Matlab
   version. Please update to R24b.
** Output
*** direct
    Write the output in the ~Documentation~ directory. At the moment, the notebooks are located in the directory
    [[https://github.com/BattMoTeam/BattMo/blob/main/Documentation/pynbnotebooks/][pynbnotebooks]]
*** link using nbsphinx-link
    - We use [[https://github.com/vidartf/nbsphinx-link][nbsphinx-link]]
    - Create a link file with extension ~nblink~, see example [[https://github.com/BattMoTeam/BattMo/blob/main/Documentation/runThermalExample.nblink][here]]
    - insert link in index, see example [[https://github.com/BattMoTeam/BattMo/blob/main/Documentation/intermediate.rst#L15][here]]
** Include in the index or in pages
   See example to the tutorial pages [[https://github.com/BattMoTeam/BattMo/blob/main/Documentation/tutorials.rst][here]]
   
* Special workflow for example scripts
** Compilation
   - run ~publishExamplesXML~ in ~utils~ directory (see documentation there) : It creates XML outputs
   - run python script ~buildPublishedExamples.py~ : converts XML to rST output
** rST description file
   - Matlab uses own markup language which complicates transformation to rST file and therefore it *should not* be used
   - We offer possibility to include extra rST description file automatically. If the example is named ~myexample.m~,
     then the extra rST file should be named ~myexamplePreamble.rst~
** Guidelines
   - To make sure that a comment you include in matlab example file appears as a comment in rST output (and not at a
     comment in the matlab code formatting), start a cell with eventually no title. Include only *one* white-space
     betwen ~%~ sign and text (otherwise ~publish~ routine exports differently).
   - The directive ~.. automodule::~ makes sure a directory is parsed. 

* Interesting Manuals
** sphinx manual
   https://www.sphinx-doc.org/en/master/contents.html
** reStucturedText (rst) format
   https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html
** rtd theme manual
   https://sphinx-rtd-theme.readthedocs.io/en/stable/
** bibtex extension manual
   https://sphinxcontrib-bibtex.readthedocs.io/en/latest/index.html
* Configuration file
  - ~conf.py~ see https://www.sphinx-doc.org/en/master/usage/configuration.html
